#!/usr/bin/env /home/guilherme/.nvm/versions/node/v8.5.0/bin/node
var AppManager, ServerManager, body_parser, chalk, compression, connect_assets, express, foreach, fs, http, marked, morgan, node_uuid, onMsg, p, path, paypal_rest_sdk, pug, request, request_json, xml2js, xmlbuilder;

fs = require('fs');

path = require('path');

http = require('http');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

foreach = require('foreach');

marked = require('marked');

morgan = require('morgan');

node_uuid = require('node-uuid');

paypal_rest_sdk = require('paypal-rest-sdk');

pug = require('pug');

request = require('request');

request_json = require('request-json');

xml2js = require('xml2js');

xmlbuilder = require('xmlbuilder');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/fonts'), path.join(__dirname, '..', 'app/assets/doc'), path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/'), path.join(__dirname, '..', 'app/assets/favicon.ico')]);
    this.app.set('port', parseInt(process.env.PORT || '3000'));
  }

  return AppManager;

})();

ServerManager = {};

ServerManager.start = function(app) {
  var self;
  self = this;
  return new Promise(function(resolve, reject) {
    var server;
    server = http.createServer(app);
    server.on('error', function(error) {
      var bind, fn;
      if (error.syscall === 'listen') {
        throw error;
      }
      bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
      fn = function(msg) {
        console.error(chalk.red(bind + ' ' + msg));
        return process.exit(1);
      };
      if (error.code === 'EACCES') {
        return fn('requires elevated privileges');
      } else if (error.code === 'EADDRINUSE') {
        return fn('is already in use');
      } else {
        return reject(error);
      }
    });
    server.listen(app.get('port'), 'localhost');
    return server.on('listening', function() {
      var addr;
      addr = server.address();
      return resolve(addr);
    });
  });
};

ServerManager.routes = function() {
  return new Promise(function(resolve, reject) {
    var app, app_manager, e, error1;
    try {
      app = express();
      app_manager = new AppManager(app);
      app_manager.boot();
      app_manager.index();
      app_manager.config();
      app_manager.templates();
      app_manager.services();
      app_manager.typeform();
      app_manager.docs();
      return resolve(app);
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

AppManager.prototype.boot = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length] time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  return this.app.use(connect_assets({
    paths: this.app.get('assets path')
  }));
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return res.render('index');
  });
};

AppManager.prototype.config = function() {
  return this.app.get('/config', function(req, res) {
    var projectName;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    return keytar.findPassword(projectName + ".firebase.apiKey").then(function(apiKey) {
      return keytar.findPassword(projectName + ".firebase.messagingSenderId").then(function(messagingSenderId) {
        return res.json({
          apiKey: apiKey,
          authDomain: projectName + ".firebaseapp.com",
          databaseURL: "https://" + projectName + ".firebaseio.com",
          projectId: projectName,
          storageBucket: projectName + ".appspot.com",
          messagingSenderId: messagingSenderId
        });
      });
    });
  });
};

AppManager.prototype.templates = function() {
  var getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html, opt, r, result;
        if (!err) {
          try {
            opt = {
              filename: _p,
              doctype: 'html'
            };
            html = pug.compile(content, opt)();
            result = {
              template: html,
              controller: '',
              route: ''
            };
            if (p.match(/_index/)) {
              result.controller = 'AuthCtrl';
              result.route = "/";
            } else if (p.match(/^formularios_uuid_[a-z]+$/)) {
              result.controller = 'TypeformCtrl';
              r = p.split("_");
              result.route = "/" + r[0] + "/:uuid/" + r[2];
            } else if (p.match(/^formularios_uuid_\w+_[a-z]+$/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/:uuid/" + r[2] + "/:token";
            } else if (p.match(/formularios_novo/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/novo";
            } else if (p.match(/^boletos$/)) {
              result.route = "/boletos";
            } else if (p.match(/boletos_id/)) {
              r = p.split("_");
              result.route = "/boletos/:invoiceid";
            } else if (p.match(/^conta_\w+_\w+$/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/:option/:action";
            } else {
              result.route = "/" + p;
            }
            console.log(result);
            return resolve(result);
          } catch (error1) {
            e = error1;
            console.log(e);
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  return this.app.get('/templates', function(req, res) {
    var onErr, onSuccess, template;
    onSuccess = function(results) {
      return res.json(results);
    };
    onErr = function(err) {
      return res.json(err.message);
    };
    return Promise.all((function() {
      var i, len, ref, results1;
      ref = require("../package.json")['angular-templates'];
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        template = ref[i];
        results1.push(getTemplate(template));
      }
      return results1;
    })()).then(onSuccess)["catch"](onErr);
  });
};

AppManager.prototype.services = function() {
  var _on, getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var html;
        if (!err) {
          html = pug.compile(content, {
            filename: _p,
            doctype: 'html'
          })();
          return resolve({
            name: p,
            options: {
              restrict: 'A',
              template: html,
              replace: true,
              transclude: true
            }
          });
        } else {
          return reject(err);
        }
      });
    });
  };
  _on = function(what) {
    var a, i, len, ref, w;
    a = [];
    ref = require("../package.json")["angular-" + what];
    for (i = 0, len = ref.length; i < len; i++) {
      w = ref[i];
      a.push(getTemplate(w));
    }
    return Promise.all(a);
  };
  this.app.get("/services", function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err);
    };
    return _on('services').then(onSuccess)["catch"](onErr);
  });
  return this.app.get("/directives", function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err);
    };
    return _on('directives').then(onSuccess)["catch"](onErr);
  });
};

AppManager.prototype.typeform = function() {
  return this.app.get('/typeform/data-api', function(req, res) {
    var projectName, pwd;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    pwd = projectName + ".typeform.apiKey";
    console.log("Search for  " + pwd);
    return keytar.findPassword(pwd).then(function(apiKey) {
      var _url, onGet;
      _url = "form/" + req.query.uuid + "?key=" + apiKey;
      _url += "&completed=" + req.query.completed;
      _url += "&limit=" + req.query.limit;
      onGet = function(err, _res, body) {
        if (err) {
          return res.json(err);
        } else {
          console.log(body);
          return res.json(body);
        }
      };
      return request_json.createClient('https://api.typeform.com/v1/').get(_url, onGet);
    })["catch"](function(err) {
      return res.json(err);
    });
  });
};

AppManager.prototype.docs = function() {
  var root;
  root = path.resolve((path.join(__dirname)) + "/../app/assets");
  this.app.get("/docs/client/index", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/config", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/auth-ctrl", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/auth-ctrl.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/run", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/run.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/services", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/boot", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/boot.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/environment", function(req, res) {
    var _index;
    _index = "doc/config/environment.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/app", function(req, res) {
    var _index;
    _index = "doc/config/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/server", function(req, res) {
    var _index;
    _index = "doc/config/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/paypal", function(req, res) {
    var _index;
    _index = "doc/config/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/pagseguro", function(req, res) {
    var _index;
    _index = "doc/config/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/docco.css", function(req, res) {
    var _index;
    _index = "doc/config/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/dependencies", function(req, res) {
    var _index;
    _index = "doc/boot/dependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/devDependencies", function(req, res) {
    var _index;
    _index = "doc/boot/devDependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/app", function(req, res) {
    var _index;
    _index = "doc/boot/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/server", function(req, res) {
    var _index;
    _index = "doc/boot/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/docco.css", function(req, res) {
    var _index;
    _index = "doc/boot/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/config", function(req, res) {
    var _index;
    _index = "doc/app/controllers/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/docs", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docs.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/index", function(req, res) {
    var _index;
    _index = "doc/app/controllers/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/pagseguro", function(req, res) {
    var _index;
    _index = "doc/app/controllers/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/paypal", function(req, res) {
    var _index;
    _index = "doc/app/controllers/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/services", function(req, res) {
    var _index;
    _index = "doc/app/controllers/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/templates", function(req, res) {
    var _index;
    _index = "doc/app/controllers/templates.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/typeform", function(req, res) {
    var _index;
    _index = "doc/app/controllers/typeform.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  return this.app.get("/docs/server/app/controllers/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
};

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express/Firebase Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

p = require('../package.json').firebase.project.name;

ServerManager.routes().then(ServerManager.start).then(function(addr) {
  return console.log(chalk.cyan(onMsg(addr)));
})["catch"](function(e) {
  return console.log(e);
});
