#!/usr/bin/env /home/pi/.nvm/versions/node/v8.0.0/bin/node
var AppManager, __firebase__, atob, beforeLogin, body_parser, chalk, compression, connect_assets, express, firebase, firebase_init, foreach, fs, getAuth, http, makeConfig, marked, morgan, node_uuid, onMsg, parseBasic, passport, passport_custom, path, pug, request_json;

fs = require('fs');

path = require('path');

http = require('http');

atob = require('atob');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

firebase = require('firebase');

foreach = require('foreach');

marked = require('marked');

morgan = require('morgan');

node_uuid = require('node-uuid');

passport = require('passport');

passport_custom = require('passport-custom');

pug = require('pug');

request_json = require('request-json');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

makeConfig = function(projectName, apiKey, messagingSenderId) {
  var config;
  return config = {
    apiKey: apiKey,
    authDomain: projectName + ".firebaseapp.com",
    databaseURL: "https://" + projectName + ".firebaseio.com",
    projectId: projectName,
    storageBucket: projectName + ".appspot.com",
    messagingSenderId: messagingSenderId
  };
};

firebase_init = function(projectName) {
  return new Promise(function(resolve, reject) {
    console.log("Checking firebase apiKey for " + projectName + "...");
    return require('keytar').findPassword(projectName + ".firebase.apiKey").then(function(apiKey) {
      if (apiKey !== null) {
        console.log("OK");
        console.log("Checking messagingSenderId for " + projectName + "...");
        return require('keytar').findPassword(projectName + ".firebase.messagingSenderId").then(function(messagingSenderId) {
          var cfg;
          console.log("OK");
          if (messagingSenderId !== null) {
            cfg = makeConfig(projectName, apiKey, messagingSenderId);
            firebase.initializeApp(cfg);
            return resolve(firebase.app());
          }
        })["catch"](function(err) {
          return reject(e);
        });
      }
    });
  });
};

parseBasic = function(result) {
  return new Promise(function(resolve, reject) {
    var c, i, len, o, r;
    o = {};
    for (i = 0, len = result.length; i < len; i++) {
      r = result[i];
      c = r.split("=");
      o[c[0]] = c[1];
    }
    return resolve(o);
  });
};

getAuth = function(req) {
  return new Promise(function(resolve, reject) {
    var bytes;
    bytes = req.headers.authorization.split("Basic ")[1];
    return resolve(atob(bytes).split(":"));
  });
};

beforeLogin = function(req, res, next) {
  if (firebase.auth().currentUser) {
    return redirect('/dashboard');
  } else {
    return next();
  }
};

passport.use('local-dashboard', new passport_custom(function(req, done) {
  return firebase.auth().onAuthStateChanged(function(user) {
    if (user) {
      return done(null, user);
    } else {
      return done(true);
    }
  });
}));

passport.use("local-login", new passport_custom(function(req, done) {
  return getAuth(req).then(parseBasic).then(function(result) {
    return firebase.auth().signInWithEmailAndPassword(result.email, result.password).then(function(x) {
      var user;
      user = firebase.auth().currentUser;
      return done(null, user);
    })["catch"](function(error) {
      return done(error.code, error.message);
    });
  });
}));

passport.use('local-logout', new passport_custom(function(req, done) {
  var onError, onSignout;
  onSignout = function() {
    return done(null);
  };
  onError = function(error) {
    return done(error);
  };
  return firebase.auth().signOut().then(onSignout, onError);
}));

passport.serializeUser(function(user, done) {
  return done(null, user.uid);
});

passport.deserializeUser(function(id, done) {
  return done(id);
});

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/')]);
    this.app.set('port', parseInt(process.env.PORT || '3000'));
  }

  return AppManager;

})();

AppManager.prototype.init = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length]  time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  this.app.use(connect_assets({
    paths: this.app.get('assets path')
  }));
  this.app.use(passport.initialize());
  return this.app.use(passport.session());
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return passport.authenticate('local-dashboard', function(err, user, info) {
      if (!err) {
        return res.render('index', {
          user: user
        });
      } else {
        return res.render('index');
      }
    })(req, res);
  });
};

AppManager.prototype.signup = function() {
  return this.app.post('/signup', function(req, res) {
    return passport.authenticate('local-signup', function(err, user, info) {
      if (err) {
        res.send(err);
      }
      return res.json(user);
    })(req, res);
  });
};

AppManager.prototype.login = function() {
  return this.app.post('/login', [beforeLogin], function(req, res) {
    return passport.authenticate('local-login', function(err, user, info) {
      if (err) {
        res.send(err);
      }
      return res.json(user);
    })(req, res);
  });
};

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express/Firebase Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

__firebase__ = require("../package.json").firebase;

firebase_init(__firebase__.project.name).then(function(firebase_app) {
  var app, app_manager, server;
  if (firebase_app) {
    app = express();
    app_manager = new AppManager(app);
    app_manager.init();
    app_manager.index();
    app_manager.signup();
    app_manager.login();
    server = http.createServer(app);
    server.on('error', function(error) {
      var bind, fn;
      if (error.syscall === 'listen') {
        throw error;
      }
      bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
      fn = function(msg) {
        console.error(chalk.red(bind + ' ' + msg));
        return process.exit(1);
      };
      if (error.code === 'EACCES') {
        return fn('requires elevated privileges');
      } else if (error.code === 'EADDRINUSE') {
        return fn('is already in use');
      } else {
        throw error;
      }
    });
    server.on('listening', function() {
      var addr;
      addr = server.address();
      return console.log(chalk.cyan(onMsg(addr)));
    });
    return server.listen(app.get('port'), 'localhost');
  }
});
