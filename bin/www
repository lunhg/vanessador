#!/usr/bin/env /home/pi/.nvm/versions/node/v8.0.0/bin/node
var AppManager, PagSeguroSDK, PayPalReq, ServerManager, atob, body_parser, chalk, compression, connect_assets, express, foreach, fs, http, keytar, marked, morgan, node_uuid, onMsg, p, path, paypal_rest_sdk, pug, request, request_json, xml2js, xmlbuilder;

fs = require('fs');

path = require('path');

http = require('http');

atob = require('atob');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

foreach = require('foreach');

keytar = require('keytar');

marked = require('marked');

morgan = require('morgan');

node_uuid = require('node-uuid');

paypal_rest_sdk = require('paypal-rest-sdk');

pug = require('pug');

request = require('request');

request_json = require('request-json');

xml2js = require('xml2js');

xmlbuilder = require('xmlbuilder');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/fonts'), path.join(__dirname, '..', 'app/assets/doc'), path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/'), path.join(__dirname, '..', 'app/assets/favicon.ico')]);
    this.app.set('port', parseInt(process.env.PORT || '3000'));
  }

  return AppManager;

})();

AppManager.initPayPal = function(results) {
  return new Promise(function(resolve, reject) {
    var c, e, error1;
    try {
      c = {
        'mode': 'sandbox',
        'client_id': results[0],
        'client_secret': results[1]
      };
      paypal_rest_sdk.configure(c);
      return resolve();
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

PayPalReq = (function() {
  function PayPalReq() {
    this.data = {};
  }

  PayPalReq.prototype.add = function(k, v) {
    return this.data[k] = v;
  };

  return PayPalReq;

})();

PagSeguroSDK = {
  config: function() {
    return new Promise(function(resolve, reject) {
      var p;
      p = require('../package.json').firebase.project.name;
      return Promise.all([keytar.findPassword(p + ".pagseguro.email"), keytar.findPassword(p + ".pagseguro.apiKey")]).then(function(results) {
        return resolve({
          email: results[0],
          token: results[1]
        });
      })["catch"](reject);
    });
  },
  toXML: function(json) {
    return new Promise(function(resolve, reject) {
      var _xml, build, hasParent, xml;
      hasParent = {};
      xml = xmlbuilder.create('root');
      build = function(el, data) {
        var _el, k, results1, v;
        results1 = [];
        for (k in data) {
          v = data[k];
          if (typeof v === 'object') {
            _el = el.ele(k);
            results1.push(build(_el, v));
          } else {
            results1.push(el.ele(k, v));
          }
        }
        return results1;
      };
      build(xml, json);
      _xml = xml.toString();
      _xml = _xml.replace(/<root>/, "<?xml version='1.0' encoding='UTF-8'?>");
      _xml = _xml.replace(/undefined/, "");
      _xml = _xml.replace(/<\/root>/, "");
      return resolve(_xml);
    });
  },
  post: function(action, json) {
    var self;
    self = this;
    return new Promise(function(resolve, reject) {
      return PagSeguroSDK.config().then(function(results) {
        json.receiver = {
          email: results.email
        };
        return PagSeguroSDK.toXML(json).then(function(xml) {
          var _request, baseurl, onPost, query;
          console.log(xml);
          baseurl = "https://ws.sandbox.pagseguro.uol.com.br/v2" + action;
          query = "?email=" + results.email + "&token=" + results.token;
          _request = {
            method: 'POST',
            url: baseurl + query,
            body: xml,
            headers: {
              'Content-Type': 'application/xml'
            }
          };
          onPost = function(err, response, body) {
            if (err) {
              resolve(err.message);
            }
            if (!err) {
              return resolve(body);
            }
          };
          return request(_request, onPost);
        });
      });
    });
  },
  get: function(action, json) {
    var self;
    self = this;
    return new Promise(function(resolve, reject) {
      return PagSeguroSDK.config().then(function(result) {
        var _request, baseurl, onGet, query;
        baseurl = "https://ws.sandbox.pagseguro.uol.com.br/v2" + action;
        query = "?email=" + result.email + "&token=" + result.token;
        _request = {
          method: 'GET',
          url: baseurl + query,
          headers: {
            'Content-Type': 'application/xml'
          }
        };
        onGet = function(err, response, body) {
          if (err) {
            resolve(err.message);
          }
          if (!err) {
            return resolve(body);
          }
        };
        return request(_request, onGet);
      });
    });
  },
  put: function(action, json) {
    var self;
    self = this;
    return new Promise(function(resolve, reject) {
      return PagSeguroSDK.config().then(function(result) {
        var url;
        url = "https://ws.sandbox.pagseguro.uol.com.br/v2" + action + "?email=" + result.email + "&token=" + result.token;
        PagSeguro.toXML(json).then(function(xml) {
          var _request, baseurl, onPut, query;
          baseurl = "https://ws.sandbox.pagseguro.uol.com.br/v2" + action;
          query = "?email=" + results.email + "&token=" + results.token;
          _request = {
            method: 'PUT',
            url: baseurl + query,
            body: xml,
            headers: {
              'Content-Type': 'application/xml'
            }
          };
          return onPut = function(err, response, body) {
            if (err) {
              resolve(err.message);
            }
            if (!err) {
              return resolve(body);
            }
          };
        });
        return request(_request, onPut);
      });
    });
  }
};

ServerManager = {};

ServerManager.start = function(app) {
  var self;
  self = this;
  return new Promise(function(resolve, reject) {
    var server;
    server = http.createServer(app);
    server.on('error', function(error) {
      var bind, fn;
      if (error.syscall === 'listen') {
        throw error;
      }
      bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
      fn = function(msg) {
        console.error(chalk.red(bind + ' ' + msg));
        return process.exit(1);
      };
      if (error.code === 'EACCES') {
        return fn('requires elevated privileges');
      } else if (error.code === 'EADDRINUSE') {
        return fn('is already in use');
      } else {
        return reject(error);
      }
    });
    server.listen(app.get('port'), 'localhost');
    return server.on('listening', function() {
      var addr;
      addr = server.address();
      return resolve(addr);
    });
  });
};

ServerManager.routes = function() {
  return new Promise(function(resolve, reject) {
    var app, app_manager, e, error1;
    try {
      app = express();
      app_manager = new AppManager(app);
      app_manager.boot();
      app_manager.index();
      app_manager.config();
      app_manager.templates();
      app_manager.services();
      app_manager.typeform();
      app_manager.paypal();
      app_manager.pagseguro();
      app_manager.docs();
      return resolve(app);
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

AppManager.prototype.boot = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length] time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  return this.app.use(connect_assets({
    paths: this.app.get('assets path')
  }));
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return res.render('index');
  });
};

AppManager.prototype.config = function() {
  return this.app.get('/config', function(req, res) {
    var projectName;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    return keytar.findPassword(projectName + ".firebase.apiKey").then(function(apiKey) {
      return keytar.findPassword(projectName + ".firebase.messagingSenderId").then(function(messagingSenderId) {
        return res.json({
          apiKey: apiKey,
          authDomain: projectName + ".firebaseapp.com",
          databaseURL: "https://" + projectName + ".firebaseio.com",
          projectId: projectName,
          storageBucket: projectName + ".appspot.com",
          messagingSenderId: messagingSenderId
        });
      });
    });
  });
};

AppManager.prototype.templates = function() {
  var getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html, opt, r, result;
        if (!err) {
          try {
            opt = {
              filename: _p,
              doctype: 'html'
            };
            html = pug.compile(content, opt)();
            result = {
              template: html,
              controller: '',
              route: ''
            };
            if (p.match(/_index/)) {
              result.controller = 'AuthCtrl';
              result.route = "/";
            } else if (p.match(/^formularios_uuid_[a-z]+$/)) {
              result.controller = 'TypeformCtrl';
              r = p.split("_");
              result.route = "/" + r[0] + "/:uuid/" + r[2];
            } else if (p.match(/^formularios_uuid_\w+_[a-z]+$/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/:uuid/" + r[2] + "/:token";
            } else if (p.match(/formularios_novo/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/novo";
            } else if (p.match(/^boletos$/)) {
              result.route = "/boletos";
            } else if (p.match(/boletos_id/)) {
              r = p.split("_");
              result.route = "/boletos/:invoiceid";
            } else if (p.match(/^conta_\w+_\w+$/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/:option/:action";
            } else {
              result.route = "/" + p;
            }
            console.log(result);
            return resolve(result);
          } catch (error1) {
            e = error1;
            console.log(e);
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  return this.app.get('/templates', function(req, res) {
    var onErr, onSuccess, template;
    onSuccess = function(results) {
      return res.json(results);
    };
    onErr = function(err) {
      return res.json(err.message);
    };
    return Promise.all((function() {
      var i, len, ref, results1;
      ref = require("../package.json")['angular-templates'];
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        template = ref[i];
        results1.push(getTemplate(template));
      }
      return results1;
    })()).then(onSuccess)["catch"](onErr);
  });
};

AppManager.prototype.services = function() {
  var _on, getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var html;
        if (!err) {
          html = pug.compile(content, {
            filename: _p,
            doctype: 'html'
          })();
          return resolve({
            name: p,
            options: {
              restrict: 'A',
              template: html,
              replace: true,
              transclude: true
            }
          });
        } else {
          return reject(err);
        }
      });
    });
  };
  _on = function(what) {
    var a, i, len, ref, w;
    a = [];
    ref = require("../package.json")["angular-" + what];
    for (i = 0, len = ref.length; i < len; i++) {
      w = ref[i];
      a.push(getTemplate(w));
    }
    return Promise.all(a);
  };
  this.app.get("/services", function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err);
    };
    return _on('services').then(onSuccess)["catch"](onErr);
  });
  return this.app.get("/directives", function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err);
    };
    return _on('directives').then(onSuccess)["catch"](onErr);
  });
};

AppManager.prototype.typeform = function() {
  return this.app.get('/typeform/data-api', function(req, res) {
    var projectName, pwd;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    pwd = projectName + ".typeform.apiKey";
    console.log("Search for  " + pwd);
    return keytar.findPassword(pwd).then(function(apiKey) {
      var _url, onGet;
      _url = "form/" + req.query.uuid + "?key=" + apiKey;
      _url += "&completed=" + req.query.completed;
      _url += "&limit=" + req.query.limit;
      onGet = function(err, _res, body) {
        if (err) {
          return res.json(err);
        } else {
          console.log(body);
          return res.json(body);
        }
      };
      return request_json.createClient('https://api.typeform.com/v1/').get(_url, onGet);
    })["catch"](function(err) {
      return res.json(err);
    });
  });
};

AppManager.prototype.paypal = function() {
  var create_invoice;
  create_invoice = function(req) {
    var ppr;
    ppr = new PayPalReq();
    ppr.add('merchant_info', {
      "email": "gcravista-facilitator@gmail.com",
      "first_name": "Vanessador",
      "last_name": "Bot",
      "business_name": "ITS",
      "phone": {
        "country_code": "51",
        "national_number": "15998006760"
      },
      "address": {
        "line1": "Abolição 403 - Vila Jardini",
        "city": "Sorocaba",
        "state": "SP",
        "postal_code": "18044070",
        "country_code": "BR"
      }
    });
    ppr.add("billing_info", [
      {
        "email": req.query.billing_info_email
      }
    ]);
    ppr.add({
      "items": [
        {
          "name": "Boleto de pagamento - ITS - formulário " + req.query.form,
          "quantity": 1.0,
          "unit_price": {
            "currency": "BRL",
            "value": req.query.value
          }
        }
      ]
    });
    ppr.add("note", "Boleto de pagamento " + (node_uuid.v4()), ppr.add("payment_term", {
      "term_type": "NET_45"
    }));
    ppr.add("shipping_info", {
      "first_name": req.query.first_name,
      "last_name": req.query.last_name,
      "business_name": "Not applicable",
      "phone": {
        "country_code": req.query.phone_country_code,
        "national_number": req.query.phone_national_number
      },
      "address": {
        "line1": req.query.line,
        "city": req.query.city,
        "state": req.query.state,
        "postal_code": req.query.postal_code,
        "country_code": req.query.country_code
      }
    });
    ppr.add("tax_inclusive", false);
    ppr.add("total_amount", {
      "currency": "BRL",
      "value": req.query.value
    });
    return ppr.data;
  };
  this.app.post('/paypal/invoices/novo', function(req, res) {
    return paypal_rest_sdk.invoice.create(create_invoice(req), function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.id);
    });
  });
  this.app.get('/paypal/invoices/:id/number', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.number);
    });
  });
  this.app.get('/paypal/invoices/:id/status', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.status);
    });
  });
  this.app.get('/paypal/invoices/:id/billing_info', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.billing_info);
    });
  });
  this.app.get('/paypal/invoices/:id/invoice_date', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.invoice_date);
    });
  });
  this.app.get('/paypal/invoices/:id/total_amount', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.total_amount);
    });
  });
  this.app.post('/paypal/invoices/:id/send', function(req, res) {
    return paypal_rest_sdk.invoice.send(req.params.id, function(err, rv) {
      if (err) {
        res.json(err);
      }
      return res.json("Um email de notificação está sendo processado pelo PayPal");
    });
  });
  this.app.post('/paypal/invoices/:id/remind', function(req, res) {
    var options;
    options = {
      "subject": "Lembrança de pagamento",
      "note": "Enviamos este email para lhe lembrar do pagamento do boleto " + req.params.id,
      "send_to_merchant": true,
      "send_to_payer": true
    };
    return paypal_rest_sdk.invoice.remind(req.params.id, options, function(err, rv) {
      if (err) {
        res.json(err);
      }
      console.log(chalk.green(rv));
      return res.json("Seu email de notificação está sendo processado pelo PayPal");
    });
  });
  this.app.post('/paypal/invoices/:id/cancel', function(req, res) {
    var error1, options;
    options = {
      "subject": "Cancelamento de pagamento",
      "note": "Cancelamento do boleto " + req.params.id,
      "send_to_merchant": true,
      "send_to_payer": true
    };
    try {
      return paypal_rest_sdk.invoice.cancel(req.params.id, options, function(err, rv) {
        if (err) {
          res.json(err);
        }
        console.log(chalk.green(rv));
        return res.json("Seu email de notificação está sendo processado pelo PayPal");
      });
    } catch (error1) {
      return res.json(err);
    }
  });
  return this.app["delete"]('/paypal/invoices/:id', function(req, res) {
    return paypal_rest_sdk.invoice.del(req.params.id, function(err, rv) {
      if (err) {
        res.json(err);
      }
      return res.json("Boleto " + req.params.id + " deletado");
    });
  });
};

AppManager.prototype.pagseguro = function() {
  var onParseXML;
  onParseXML = function(result) {
    var self;
    self = this;
    return new Promise(function(resolve, reject) {
      return xml2js.parseString(result, function(err, str) {
        if (err) {
          reject(err);
        }
        if (!err) {
          return self.res.json(JSON.parse(str));
        }
      });
    });
  };
  this.app.get('/pagseguro/planos', function(req, res) {
    return PagSeguroSDK.get('/pre-approvals').then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.post('/pagseguro/planos', function(req, res) {
    return PagSeguroSDK.post('/pre-approvals/request', {
      "directPreApproval": {
        "plan": req.query['plan'],
        "reference": req.query['ref'],
        "sender": {
          "name": req.query['nome'],
          "email": req.query['email'],
          "ip": req.ip,
          "hash": node_uuid.v4(),
          "phone": {
            "areacode": req.query['areacode'],
            "number": req.query['number']
          },
          "documents": {
            "document": {
              "type": req.query['doc_type'],
              "number": req.query['doc_num']
            }
          }
        },
        "paymentMethod": {
          "token": req.query['payment_token'],
          "type": req.query['payment_type'],
          "holder": {
            "name": req.query['nome'],
            "birthDate": req.query['birthDate'],
            "document": {
              "type": req.query['doc_type'],
              "number": req.query['doc_num']
            },
            "phone": {
              "areacode": req.query['areacode'],
              "number": req.query['number']
            }
          }
        }
      }
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.get('/pagseguro/planos/notificacoes', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/notifications?page=" + req.query['page'] + "&maxPagesResults=50&interval=" + req.query['dias']).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.get('/pagseguro/planos/notificacoes/:id', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/notifications/" + req.params['id']).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.post('/pagseguro/planos/pagamento/:id', function(req, res) {
    var id;
    id = node_uuid.v4();
    return PagSeguroSDK.post('/pre-approvals/payment', {
      "payment": {
        "preApprovalCode": req.query['code'],
        "reference": req.query['ref'],
        "senderHash": node_uuid.v4(),
        "senderIp": req.ip,
        "items": [
          {
            "id": req.params['id'],
            "description": "Boleto de pagamento",
            "quantity": 1,
            "amount": "10.00",
            "weight": 1,
            "shippingCost": 0.00
          }
        ]
      }
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.get('/pagseguro/planos/requerer', function(req, res) {
    return PagSeguroSDK.get('/pre-approvals/request').then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.post('/pagseguro/planos/requerer', function(req, res) {
    return PagSeguroSDK.post('/pre-approvals/request', {
      "preApprovalRequest": {
        "redirect_url": req.query['redirect_url'],
        "redirect_url": req.query['review_url'],
        "reference": req.query['ref'],
        "preApproval": {
          "name": req.query['name'],
          "charge": "AUTO",
          "period": "MONTHLY",
          "amountPerPayment": req.query['amount'],
          "membershipFee": (parseFloat(req.query['amount']) * 0.05).toFixed(2),
          "expiration": {
            "value": 1,
            "unit": "MONTHS"
          },
          "details": 'ITS_' + node_uuid.v4()
        }
      }
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.put('/pagseguro/planos/:id', function(req, res) {
    return PagSeguroSDK.put("/pre-approvals/" + req.params['id'] + "/payment", {
      "amountPerPayment": req.query['amount'],
      "updateSubscriptions": req.query['update']
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.get('/pagseguro/planos/:id', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/" + req.params['id']).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.put('/pagseguro/planos/:id/cancela', function(req, res) {
    return PagSeguroSDK.put("/pre-approvals/" + req.params['id'] + "/payment", {
      "pre-approval-code": req.query['code']
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.put('/pagseguro/plano/:id/desconto', function(req, res) {
    return PagSeguroSDK.put("/pre-approvals/" + req.params['id'] + "/payment", {
      "type": "DISCOUNT_PERCENT",
      "value": req.params['value']
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.get('/pagseguro/plano/:id/ordens', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/" + req.params['id'] + "/payment-orders").then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.post('/pagseguro/plano/:id/ordens/:pid', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/" + req.params['id'] + "/payment-orders/" + req.params['pid'] + "/payment").then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  this.app.put('/pagseguro/plano/:id/ordens/:pid', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/" + req.params['id'] + "/status", {
      "status": req.query['status']
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
  return this.app.put('/pagseguro/plano/:id/ordens/:pid', function(req, res) {
    return PagSeguroSDK.get("/pre-approvals/" + req.params['id'] + "/status", {
      "type": "CREDITCARD",
      "sender": {
        "ip": req.ip,
        "hash": node_uuid.v4()
      },
      "creditCard": {
        "token": req.query['token'],
        "holder": {
          "name": req.query['nome'],
          "birthDate": req.query['birthDate'],
          "document": {
            "type": req.query['doc_type'],
            "number": req.query['doc_num']
          },
          "phone": {
            "areacode": req.query['areacode'],
            "number": req.query['number']
          }
        }
      }
    }).then(onParseXML.bind({
      res: res
    }))["catch"](function(e) {
      return res.send(e);
    });
  });
};

AppManager.prototype.docs = function() {
  var root;
  root = path.resolve((path.join(__dirname)) + "/../app/assets");
  this.app.get("/docs/client/index", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/config", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/auth-ctrl", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/auth-ctrl.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/run", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/run.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/services", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/boot", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/boot.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/environment", function(req, res) {
    var _index;
    _index = "doc/config/environment.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/app", function(req, res) {
    var _index;
    _index = "doc/config/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/server", function(req, res) {
    var _index;
    _index = "doc/config/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/paypal", function(req, res) {
    var _index;
    _index = "doc/config/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/pagseguro", function(req, res) {
    var _index;
    _index = "doc/config/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/docco.css", function(req, res) {
    var _index;
    _index = "doc/config/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/dependencies", function(req, res) {
    var _index;
    _index = "doc/boot/dependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/devDependencies", function(req, res) {
    var _index;
    _index = "doc/boot/devDependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/app", function(req, res) {
    var _index;
    _index = "doc/boot/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/server", function(req, res) {
    var _index;
    _index = "doc/boot/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/docco.css", function(req, res) {
    var _index;
    _index = "doc/boot/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/config", function(req, res) {
    var _index;
    _index = "doc/app/controllers/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/docs", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docs.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/index", function(req, res) {
    var _index;
    _index = "doc/app/controllers/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/pagseguro", function(req, res) {
    var _index;
    _index = "doc/app/controllers/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/paypal", function(req, res) {
    var _index;
    _index = "doc/app/controllers/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/services", function(req, res) {
    var _index;
    _index = "doc/app/controllers/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/templates", function(req, res) {
    var _index;
    _index = "doc/app/controllers/templates.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/typeform", function(req, res) {
    var _index;
    _index = "doc/app/controllers/typeform.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  return this.app.get("/docs/server/app/controllers/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
};

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express/Firebase Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

p = require('../package.json').firebase.project.name;

Promise.all([keytar.findPassword(p + ".paypal.apiKey"), keytar.findPassword(p + ".paypal.secret")]).then(AppManager.initPayPal).then(AppManager.initPagSeguro).then(ServerManager.routes).then(ServerManager.start).then(function(addr) {
  return console.log(chalk.cyan(onMsg(addr)));
})["catch"](function(e) {
  return console.log(e);
});
