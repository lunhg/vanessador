#!/usr/bin/env /home/pi/.nvm/versions/node/v8.0.0/bin/node
var AppManager, PagSeguroSDK, ServerManager, atob, body_parser, chalk, compression, connect_assets, express, foreach, fs, http, jstransformer_marked, keytar, morgan, node_schedule, node_uuid, nodemailer, nodemailer_mailgun_transport, onMsg, p, path, paypal_rest_sdk, pug, request, request_json, request_promise, testcafe, testcafe_vue_selectors, xml2js, xmlbuilder;

fs = require('fs');

path = require('path');

http = require('http');

atob = require('atob');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

foreach = require('foreach');

jstransformer_marked = require('jstransformer-marked');

keytar = require('keytar');

morgan = require('morgan');

node_schedule = require('node-schedule');

node_uuid = require('node-uuid');

nodemailer = require('nodemailer');

nodemailer_mailgun_transport = require('nodemailer-mailgun-transport');

paypal_rest_sdk = require('paypal-rest-sdk');

pug = require('pug');

request = require('request');

request_json = require('request-json');

request_promise = require('request-promise');

testcafe = require('testcafe');

testcafe_vue_selectors = require('testcafe-vue-selectors');

xml2js = require('xml2js');

xmlbuilder = require('xmlbuilder');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [jstransformer_marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/fonts'), path.join(__dirname, '..', 'app/assets/doc'), path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/'), path.join(__dirname, '..', 'app/assets/favicon.ico')]);
<<<<<<< HEAD
    this.app.set('port', parseInt(process.env.PORT || '8000'));
=======
    this.app.set('port', parseInt(process.env.PORT || '3000'));
>>>>>>> master
  }

  return AppManager;

})();

PagSeguroSDK = {
  config: function() {
    return new Promise(function(resolve, reject) {
      var e, error1, p;
      p = require('../package.json').firebase.project.name;
      try {
        return resolve({
          email: process.env.APIS_EMAIL,
          token: process.env.PAGSEGURO_TOKEN
        });
      } catch (error1) {
        e = error1;
        return reject(e);
      }
    });
  },
  toXML: function(json) {
    return new Promise(function(resolve, reject) {
      var _xml, build, hasParent, xml;
      hasParent = {};
      xml = xmlbuilder.create('root');
      build = function(el, data) {
        var _el, k, results1, v;
        results1 = [];
        for (k in data) {
          v = data[k];
          if (typeof v === 'object') {
            _el = el.ele(k);
            results1.push(build(_el, v));
          } else {
            results1.push(el.ele(k, v));
          }
        }
        return results1;
      };
      build(xml, json);
      _xml = xml.toString();
      _xml = _xml.replace(/<root>/, "<?xml version='1.0' encoding='UTF-8'?>");
      _xml = _xml.replace(/undefined/, "");
      _xml = _xml.replace(/<\/root>/, "");
      return resolve(_xml);
    });
  },
  post: function(action, json) {
    var self;
    self = this;
    return new Promise(function(resolve, reject) {
      return PagSeguroSDK.config().then(function(results) {
        var _request, baseurl;
        baseurl = "https://ws.sandbox.pagseguro.uol.com.br/v2" + action + "/?";
        baseurl += "&email=" + results.email;
        baseurl += "&token=" + results.token;
        _request = {
          method: 'POST',
          url: baseurl,
          headers: {
            'Content-Type': 'application/xml'
          }
        };
        return PagSeguroSDK.toXML(json || {}).then(function(xml) {
          var onPost;
          console.log(xml);
          _request.body = xml;
          onPost = function(err, response, body) {
            console.log(body);
            if (err) {
              resolve(err.message);
            }
            if (!err) {
              return resolve(body);
            }
          };
          return request(_request, onPost);
        });
      });
    });
  },
  get: function(action, json) {
    var self;
    self = this;
    return new Promise(function(resolve, reject) {
      return PagSeguroSDK.config().then(function(result) {
        json.email = results.email;
        json.token = results.token;
        return PagSeguroSDK.toXML(json).then(function(xml) {
          var _request, baseurl, onGet;
          baseurl = "https://ws.sandbox.pagseguro.uol.com.br/v2" + action;
          _request = {
            method: 'GET',
            url: baseurl,
            headers: {
              'Content-Type': 'application/xml'
            }
          };
          onGet = function(err, response, body) {
            if (err) {
              resolve(err.message);
            }
            if (!err) {
              return resolve(body);
            }
          };
          return request(_request, onGet);
        });
      });
    });
  }
};

ServerManager = {};

ServerManager.start = function(app) {
  var self;
  self = this;
  return new Promise(function(resolve, reject) {
    var server;
    server = http.createServer(app);
    server.on('error', function(error) {
      var bind, fn;
      if (error.syscall === 'listen') {
        throw error;
      }
      bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
      fn = function(msg) {
        console.error(chalk.red(bind + ' ' + msg));
        return process.exit(1);
      };
      if (error.code === 'EACCES') {
        return fn('requires elevated privileges');
      } else if (error.code === 'EADDRINUSE') {
        return fn('is already in use');
      } else {
        return reject(error);
      }
    });
    server.listen(app.get('port'), 'localhost');
    return server.on('listening', function() {
      var addr;
      addr = server.address();
      return resolve(addr);
    });
  });
};

ServerManager.routes = function() {
  return new Promise(function(resolve, reject) {
    var app, app_manager, e, error1;
    try {
      app = express();
      app_manager = new AppManager(app);
      app_manager.boot();
      app_manager.index();
      app_manager.config();
      app_manager.templates();
      app_manager.typeform();
      app_manager.pagseguro();
      app_manager.mailer();
      app_manager.docs();
      return resolve(app);
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

AppManager.prototype.boot = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length] time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  return this.app.use(connect_assets({
    paths: this.app.get('assets path'),
    bundle: true
  }));
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return res.render('index');
  });
};

AppManager.prototype.config = function() {
  return this.app.get('/config', function(req, res) {
    var projectName;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    return res.json({
      apiKey: process.env.FIREBASE_API_KEY,
      authDomain: projectName + ".firebaseapp.com",
      databaseURL: "https://" + projectName + ".firebaseio.com",
      projectId: projectName,
      storageBucket: projectName + ".appspot.com",
      messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID
    });
  });
};

AppManager.prototype.templates = function() {
  var getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html, opt, r, result;
        if (!err) {
          try {
            opt = {
              filename: _p,
              doctype: 'html'
            };
            html = pug.compile(content, opt)();
            result = {
              component: {
                template: html
              },
              name: p
            };
            if (p.match(/_index/)) {
              result.path = "/";
            } else if (p.match(/^formularios_uuid_[a-z]+$/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/:uuid/" + r[2];
            } else if (p.match(/^formularios_uuid_\w+_[a-z]+$/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/:uuid/" + r[2] + "/:token";
            } else if (p.match(/formularios_novo/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/novo";
            } else if (p.match(/^boletos$/)) {
              result.path = "/boletos";
            } else if (p.match(/boletos_id/)) {
              r = p.split("_");
              result.path = "/boletos/:invoiceid";
            } else if (p.match(/^conta_\w+_\w+$/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/:option/:action";
            } else if (p.match(/^estudantes$/)) {
              result.path = "/estudantes";
            } else if (p.match(/^estudantes_id$/)) {
              result.path = "/estudantes/:id";
            } else if (p.match(/^cursos$/)) {
              result.path = "/cursos";
            } else if (p.match(/^cursos_id$/)) {
              result.path = "/cursos/:id";
            } else {
              result.path = "/" + p;
            }
            return resolve(result);
          } catch (error1) {
            e = error1;
            console.log(e);
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  this.app.get('/templates/routes/:type', function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err.message);
    };
    return getTemplate(req.params['type']).then(onSuccess)["catch"](onErr);
  });
  this.app.get('/templates/index/routes', function(req, res) {
    return res.json(["_index", "login", "signup", "resetPassword", "confirm", "conta", "formularios", "estudantes", "cursos", "matriculas"]);
  });
  this.app.get("/templates/index/page", function(req, res) {
    return res.send("<div>\n<vanessador-menu :autorizado='autorizado' :user='user'></vanessador-menu>\n<div class='container-fluid'>\n  <div class='side-body'>\n    <transition>\n      <router-view :autorizado='autorizado' :user='user' :atualizar='atualizar' :estudantes='estudantes' :cursos='cursos' :formularios='formularios' :modelos='modelos' :questions='questions' :responses='responses' :matriculas='matriculas' :login='login' :logout='logout'></router-view>\n    </transition>\n  </div>\n</div>\n</div>");
  });
  return this.app.get("/templates/index/data", function(req, res) {
    var cursos, estudantes, formularios, matriculas, xlsCursos, xlsEstudantes, xlsFormularios, xlsMatriculas;
    xlsCursos = {
      input_list: {
        'type': 'text',
        'placeholder': 'ABCDEFG',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '26',
        'label': 'Linha final'
      }
    };
    xlsEstudantes = {
      input_list: {
        'type': 'text',
        'placeholder': 'ABCDEFGHIJKLMNO',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '726',
        'label': 'Linha final'
      }
    };
    xlsFormularios = {
      input_list: {
        'type': 'text',
        'placeholder': 'AB',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '3',
        'label': 'Linha final'
      }
    };
    xlsMatriculas = {
      input_list: {
        'type': 'text',
        'placeholder': 'AB',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '3',
        'label': 'Linha final'
      }
    };
    formularios = {
      input_typeform: {
        'type': 'text',
        'placeholder': 'E20qGg',
        'label': 'Código typeform'
      },
      input_curso: {
        'type': 'text',
        'placeholder': '-Ktm1CBbiRXF7OEUellX',
        'label': 'ID curso'
      }
    };
    matriculas = {
      input_curso: {
        'type': 'text',
        'label': 'ID curso'
      },
      input_estudante: {
        'type': 'text',
        'label': 'ID estudante'
      }
    };
    estudantes = {
      input_nome: {
        'type': 'text',
        'placeholder': 'nome',
        'label': 'Nome'
      },
      input_email1: {
        'type': 'text',
        'placeholder': 'email1@dominio',
        'label': 'Email 1'
      },
      input_email2: {
        'type': 'text',
        'placeholder': 'email2@dominio',
        'label': 'Email 2'
      },
      input_email3: {
        'type': 'text',
        'placeholder': 'email3@dominio',
        'label': 'Email 3'
      },
      input_profissao: {
        'type': 'text',
        'placeholder': 'trabalho',
        'label': 'Profissão'
      },
      input_idade: {
        'type': 'text',
        'placeholder': '8-80',
        'label': 'Idade'
      },
      input_genero: {
        'type': 'text',
        'placeholder': 'M/F/Outro',
        'label': 'Gênero'
      },
      input_telefone: {
        'type': 'text',
        'placeholder': '12345678',
        'label': 'Telefone'
      },
      input_estado: {
        'type': 'text',
        'placeholder': 'propriedade',
        'label': 'Estado'
      },
      input_cidade: {
        'type': 'text',
        'placeholder': 'propriedade',
        'label': 'Cidade'
      },
      input_isAlumni: {
        'type': 'check',
        'label': 'É Alumni?'
      }
    };
    cursos = {
      input_nome: {
        'type': 'text',
        'placeholder': 'nome',
        'label': 'Nome'
      },
      input_typeform_code: {
        'type': 'text',
        'placeholder': 'E20qGg',
        'label': 'Código typeform'
      },
      input_inicio_matricula: {
        'type': 'date',
        'label': 'Início das matrículas'
      },
      input_fim_matricula: {
        'type': 'date',
        'label': 'Fim das matrículas'
      },
      input_carga_horaria: {
        'type': 'text',
        'placeholder': '6 hs',
        'label': 'Carga Horária'
      },
      input_quantidade_aulas: {
        'type': 'number',
        'placeholder': '3',
        'label': 'Quantidade de Aulas'
      },
      input_data_inicio: {
        'type': 'date',
        'label': 'Data de início das aulas'
      },
      input_data_termino: {
        'type': 'date',
        'label': 'Data de término das aulas'
      },
      input_data_inicio_valor1: {
        'type': 'number',
        'label': 'Valor para data de início 1 (R$)'
      },
      input_data_inicio_valor2: {
        'type': 'number',
        'label': 'Valor para data de início 2 (R$)'
      },
      input_data_inicio_valor3: {
        'type': 'number',
        'label': 'Valor para data de início 3 (R$)'
      },
      input_valor_cheio: {
        'type': 'number',
        'placeholder': '200',
        'label': 'Valor Cheio (R$)'
      },
      input_link_valor1: {
        'type': 'text',
        'placeholder': 'https://pag.ae/12345',
        'label': 'Codigo Pagseguro 1'
      },
      input_link_valor2: {
        'type': 'text',
        'placeholder': 'https://pag.ae/45678',
        'label': 'Codigo Pagseguro 2'
      },
      input_link_valor3: {
        'type': 'text',
        'placeholder': 'https://pag.ae/90123',
        'label': 'Codigo Pagseguro 3'
      }
    };
    return res.json({
      search: '',
      autorizado: false,
      user: {
        displayName: false,
        email: false,
        photoURL: false,
        telephone: false
      },
      atualizar: {},
      modelos: {
        xls: {
          cursos: xlsCursos,
          estudantes: xlsEstudantes,
          formularios: xlsFormularios,
          matriculas: xlsMatriculas
        },
        formularios: formularios,
        matriculas: matriculas,
        estudantes: estudantes,
        cursos: cursos
      }
    });
  });
};

AppManager.prototype.services = function() {};

AppManager.prototype.typeform = function() {
  return this.app.get('/typeform/data-api', function(req, res) {
    var projectName, pwd;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    pwd = projectName + ".typeform.apiKey";
    console.log("Search for  " + pwd);
    return keytar.findPassword(pwd).then(function(apiKey) {
      var _url, onGet;
      _url = "form/" + req.query.uuid + "?key=" + apiKey;
      _url += "&completed=true";
      onGet = function(err, _res, body) {
        if (err) {
          return res.json(err);
        } else {
          console.log(body);
          return res.json(body);
        }
      };
      return request_json.createClient('https://api.typeform.com/v1/').get(_url, onGet);
    })["catch"](function(err) {
      return res.json(err);
    });
  });
};

AppManager.prototype.pagseguro = function() {
  this.app.post('/pagseguro/boleto/gerar/id', function(req, res) {
    return PagSeguroSDK.post('/sessions').then(function(result) {
      return xml2js.parseString(result, function(err, str) {
        if (err) {
          res.send(err);
        }
        if (!err) {
          res.status(201);
          return res.json(JSON.parse(str));
        }
      });
    })["catch"](function(e) {
      return res.send(e);
    });
  });
  return this.app.post('/pagseguro/boleto/gerar', function(req, res) {
    return PagSeguroSDK.post('/transactions', {
      payment: {
        mode: 'default',
        method: 'boleto',
        currency: 'BRL',
        notificationURL: 'http://192.168.0.11:3000/#/notifica',
        paymentMode: 'default',
        receiverEmail: 'gcravista@gmail.com',
        sender: {
          hash: req.query['hash'],
          documents: {
            document: {
              type: 'CPF',
              value: req.query['cpf']
            }
          },
          phone: {
            areaCode: '99',
            number: '99999999'
          },
          name: req.query['nome'],
          email: req.query['email']
        },
        items: {
          item: {
            id: req.query['id'],
            description: req.query['description'],
            amount: req.query['amount'],
            quantity: 1
          }
        },
        reference: req.query['id'],
        shipping: {
          address: {
            street: 'NONE',
            number: 9999,
            complement: '9o andar',
            district: 'NONE',
            city: req.query['city'],
            state: req.query['state'],
            country: 'BRA',
            postalCode: 99999999
          },
          type: 1,
          cost: '0.00',
          addressRequired: false
        }
      }
    }).then(function(result) {
      console.log(result);
      return xml2js.parseString(result, function(err, str) {
        var _json;
        if (err) {
          res.send(err);
        }
        if (!err) {
          res.status(201);
          _json = JSON.parse(str);
          console.log(_json);
          return res.json(_json);
        }
      });
    })["catch"](function(e) {
      return res.send(e);
    });
  });
};

AppManager.prototype.mailer = function() {
  var getTemplate;
  getTemplate = function(p, opt) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html;
        if (!err) {
          try {
            html = pug.compile(content, {
              filename: _p,
              doctype: 'html'
            })({
              curso: opt.curso,
              nome: opt.nome,
              link: opt.link
            });
            return resolve(html);
          } catch (error1) {
            e = error1;
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  this.app.post('/mailer/mailgun', function(req, res) {
    return res.send('SENT MAIL');
  });
  return this.app.post('/mailer/send/:type', function(req, res) {
    var curso, link, nome, projectName, self, to;
    self = this;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    to = req.query.to;
    nome = req.query.nome;
    curso = req.query.curso;
    link = req.query.link;
    return getTemplate('mailer-' + req.params.type, {
      nome: nome,
      curso: curso,
      link: link
    }).then(function(html) {
      var results;
      return results = {
        auth: {
          api_key: process.env.MAILGUN_API_KEY,
          domain: process.env.MAILGUN_DOMAIN
        },
        options: {
          from: "\"Vanessador-not-reply\" <postmaster@" + results[1] + ">",
          to: req.query.to,
          subject: "[Vanessador]: Boleto - " + req.query.curso,
          html: html
        }
      };
    }).then(function(results) {
      var mailer;
      mailer = nodemailer.createTransport(nodemailer_mailgun_transport({
        auth: results.auth
      }));
      return mailer.sendMail(results.options).then(function(r) {
        res.status(201);
        return res.json(r);
      })["catch"](function(error) {
        console.log(error);
        res.status(500);
        return res.send(error);
      });
    })["catch"](function(error) {
      console.log(error);
      res.status(500);
      return res.send(error);
    });
  });
};

AppManager.prototype.docs = function() {
  var root;
  root = path.resolve((path.join(__dirname)) + "/../app/assets");
<<<<<<< HEAD
  this.app.get("/docs/:folder/:file", function(req, res) {
    var _index;
    _index = "doc/" + req.params['folder'] + "/" + req.params['file'] + ".html";
=======
  this.app.get("/docs/client/index", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/config", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/auth-ctrl", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/auth-ctrl.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/run", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/run.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/services", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/boot", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/boot.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/client/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/environment", function(req, res) {
    var _index;
    _index = "doc/config/environment.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/app", function(req, res) {
    var _index;
    _index = "doc/config/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/server", function(req, res) {
    var _index;
    _index = "doc/config/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/paypal", function(req, res) {
    var _index;
    _index = "doc/config/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/pagseguro", function(req, res) {
    var _index;
    _index = "doc/config/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/docco.css", function(req, res) {
    var _index;
    _index = "doc/config/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/dependencies", function(req, res) {
    var _index;
    _index = "doc/boot/dependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/devDependencies", function(req, res) {
    var _index;
    _index = "doc/boot/devDependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/app", function(req, res) {
    var _index;
    _index = "doc/boot/app.html";
>>>>>>> master
    return res.sendFile(_index, {
      'root': root
    });
  });
<<<<<<< HEAD
  this.app.get("/docs/:folder/:sub/:file", function(req, res) {
    var _index;
    _index = "doc/" + req.params['folder'] + "/" + req.params['sub'] + "/" + req.params['file'] + ".html";
=======
  this.app.get("/docs/server/boot/server", function(req, res) {
    var _index;
    _index = "doc/boot/server.html";
>>>>>>> master
    return res.sendFile(_index, {
      'root': root
    });
  });
<<<<<<< HEAD
  return this.app.get("/docs/:app/docco.css", function(req, res) {
=======
  this.app.get("/docs/server/boot/docco.css", function(req, res) {
>>>>>>> master
    var _index;
    _index = "doc/boot/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/config", function(req, res) {
    var _index;
    _index = "doc/app/controllers/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/docs", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docs.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/index", function(req, res) {
    var _index;
    _index = "doc/app/controllers/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/pagseguro", function(req, res) {
    var _index;
    _index = "doc/app/controllers/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/paypal", function(req, res) {
    var _index;
    _index = "doc/app/controllers/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/services", function(req, res) {
    var _index;
    _index = "doc/app/controllers/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/templates", function(req, res) {
    var _index;
    _index = "doc/app/controllers/templates.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/typeform", function(req, res) {
    var _index;
    _index = "doc/app/controllers/typeform.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  return this.app.get("/docs/server/app/controllers/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
};

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

p = require('../package.json').firebase.project.name;

Promise.all([keytar.findPassword(p + ".paypal.apiKey"), keytar.findPassword(p + ".paypal.secret")]).then(AppManager.initPagSeguro).then(ServerManager.routes).then(ServerManager.start).then(function(addr) {
  return console.log(chalk.cyan(onMsg(addr)));
})["catch"](function(e) {
  return console.log(e);
});
