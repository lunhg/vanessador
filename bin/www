#!/usr/bin/env /home/pi/.nvm/versions/node/v8.0.0/bin/node
var AppManager, PayPalReq, ServerManager, atob, body_parser, chalk, compression, connect_assets, express, foreach, fs, http, keytar, marked, morgan, node_uuid, onMsg, p, path, paypal_rest_sdk, pug, request_json;

fs = require('fs');

path = require('path');

http = require('http');

atob = require('atob');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

foreach = require('foreach');

keytar = require('keytar');

marked = require('marked');

morgan = require('morgan');

node_uuid = require('node-uuid');

paypal_rest_sdk = require('paypal-rest-sdk');

pug = require('pug');

request_json = require('request-json');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/fonts'), path.join(__dirname, '..', 'app/assets/doc'), path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/')]);
    this.app.set('port', parseInt(process.env.PORT || '3000'));
  }

  return AppManager;

})();

AppManager.initPayPal = function(results) {
  return new Promise(function(resolve, reject) {
    var _c, c, e, error1;
    try {
      c = {
        'mode': 'sandbox',
        'client_id': results[0],
        'client_secret': results[1]
      };
      _c = {
        'mode': 'sandbox',
        'client_id': 'ATRMLn-_R6kkGYPoHvuES42_dKGhT8LbV4TjBvN6ox6vh8t4cUmneSiRY-Ord1t16mhizMRVGp1Y2EaF',
        'client_secret': 'ELL8WYaMXwz0tlJ7vHZNI2g7BfQPt76qjfmEzPR2RcOOBU7nEg5A8Uy7zD09D3VfAltGNw_n0BG_a_gY'
      };
      paypal_rest_sdk.configure(c);
      return resolve();
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

PayPalReq = (function() {
  function PayPalReq() {
    this.data = {};
  }

  PayPalReq.prototype.add = function(k, v) {
    return this.data[k] = v;
  };

  return PayPalReq;

})();

ServerManager = {};

ServerManager.bind = function(app) {
  var self;
  self = this;
  return new Promise(function(resolve, reject) {
    var server;
    server = http.createServer(app);
    server.on('error', function(error) {
      var bind, fn;
      if (error.syscall === 'listen') {
        throw error;
      }
      bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
      fn = function(msg) {
        console.error(chalk.red(bind + ' ' + msg));
        return process.exit(1);
      };
      if (error.code === 'EACCES') {
        return fn('requires elevated privileges');
      } else if (error.code === 'EADDRINUSE') {
        return fn('is already in use');
      } else {
        return reject(error);
      }
    });
    server.listen(app.get('port'), 'localhost');
    return server.on('listening', function() {
      var addr;
      addr = server.address();
      return resolve(addr);
    });
  });
};

ServerManager.start = function() {
  return new Promise(function(resolve, reject) {
    var app, app_manager, e, error1;
    try {
      app = express();
      app_manager = new AppManager(app);
      app_manager.boot();
      app_manager.index();
      app_manager.login();
      app_manager.config();
      app_manager.templates();
      app_manager.services();
      app_manager.typeform();
      app_manager.paypal();
      app_manager.docs();
      return resolve(app);
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

AppManager.prototype.boot = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length] time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  return this.app.use(connect_assets({
    paths: this.app.get('assets path')
  }));
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return res.render('index');
  });
};

AppManager.prototype.login = function() {
  return this.app.post('/auth/callback', function(req, res) {
    return passport.authenticate('firebase-login', function(err, user, info) {
      if (err) {
        return res.json(err);
      } else {
        return res.json({
          user: user,
          info: info
        });
      }
    })(req, res);
  });
};

AppManager.prototype.config = function() {
  return this.app.get('/config', function(req, res) {
    var projectName;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    return keytar.findPassword(projectName + ".firebase.apiKey").then(function(apiKey) {
      return keytar.findPassword(projectName + ".firebase.messagingSenderId").then(function(messagingSenderId) {
        return res.json({
          apiKey: apiKey,
          authDomain: projectName + ".firebaseapp.com",
          databaseURL: "https://" + projectName + ".firebaseio.com",
          projectId: projectName,
          storageBucket: projectName + ".appspot.com",
          messagingSenderId: messagingSenderId
        });
      });
    });
  });
};

AppManager.prototype.templates = function() {
  var getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html, opt, r, result;
        if (!err) {
          try {
            opt = {
              filename: _p,
              doctype: 'html'
            };
            html = pug.compile(content, opt)();
            result = {
              template: html,
              controller: '',
              route: ''
            };
            if (p.match(/_index/)) {
              result.controller = 'AuthCtrl';
              result.route = "/";
            } else if (p.match(/^formularios_uuid_[a-z]+$/)) {
              result.controller = 'TypeformCtrl';
              r = p.split("_");
              result.route = "/" + r[0] + "/:uuid/" + r[2];
            } else if (p.match(/^formularios_uuid_\w+_[a-z]+$/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/:uuid/" + r[2] + "/:token";
            } else if (p.match(/formularios_novo/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/novo";
            } else if (p.match(/^boletos$/)) {
              result.route = "/boletos";
            } else if (p.match(/boletos_id/)) {
              r = p.split("_");
              result.route = "/boletos/:invoiceid";
            } else if (p.match(/^conta_\w+_\w+$/)) {
              r = p.split("_");
              result.route = "/" + r[0] + "/:option/:action";
            } else {
              result.route = "/" + p;
            }
            console.log(result);
            return resolve(result);
          } catch (error1) {
            e = error1;
            console.log(e);
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  return this.app.get('/templates', function(req, res) {
    var onErr, onSuccess, template;
    onSuccess = function(results) {
      return res.json(results);
    };
    onErr = function(err) {
      return res.json(err.message);
    };
    return Promise.all((function() {
      var i, len, ref, results1;
      ref = require("../package.json")['angular-templates'];
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        template = ref[i];
        results1.push(getTemplate(template));
      }
      return results1;
    })()).then(onSuccess)["catch"](onErr);
  });
};

AppManager.prototype.services = function() {
  var _on, getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var html;
        if (!err) {
          html = pug.compile(content, {
            filename: _p,
            doctype: 'html'
          })();
          return resolve({
            name: p,
            options: {
              restrict: 'A',
              template: html,
              replace: true,
              transclude: true
            }
          });
        } else {
          return reject(err);
        }
      });
    });
  };
  _on = function(what) {
    var a, i, len, ref, w;
    a = [];
    ref = require("../package.json")["angular-" + what];
    for (i = 0, len = ref.length; i < len; i++) {
      w = ref[i];
      a.push(getTemplate(w));
    }
    return Promise.all(a);
  };
  this.app.get("/services", function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err);
    };
    return _on('services').then(onSuccess)["catch"](onErr);
  });
  return this.app.get("/directives", function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err);
    };
    return _on('directives').then(onSuccess)["catch"](onErr);
  });
};

AppManager.prototype.typeform = function() {
  return this.app.get('/typeform/data-api', function(req, res) {
    var projectName, pwd;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    pwd = projectName + ".typeform.apiKey";
    console.log("Search for  " + pwd);
    return keytar.findPassword(pwd).then(function(apiKey) {
      var _url, onGet;
      _url = "form/" + req.query.uuid + "?key=" + apiKey;
      _url += "&completed=" + req.query.completed;
      _url += "&limit=" + req.query.limit;
      onGet = function(err, _res, body) {
        if (err) {
          return res.json(err);
        } else {
          console.log(body);
          return res.json(body);
        }
      };
      return request_json.createClient('https://api.typeform.com/v1/').get(_url, onGet);
    })["catch"](function(err) {
      return res.json(err);
    });
  });
};

AppManager.prototype.paypal = function() {
  var create_invoice;
  create_invoice = function(req) {
    var ppr;
    ppr = new PayPalReq();
    ppr.add('merchant_info', {
      "email": "gcravista-facilitator@gmail.com",
      "first_name": "Vanessador",
      "last_name": "Bot",
      "business_name": "ITS",
      "phone": {
        "country_code": "51",
        "national_number": "15998006760"
      },
      "address": {
        "line1": "Abolição 403 - Vila Jardini",
        "city": "Sorocaba",
        "state": "SP",
        "postal_code": "18044070",
        "country_code": "BR"
      }
    });
    ppr.add("billing_info", [
      {
        "email": req.query.billing_info_email
      }
    ]);
    ppr.add({
      "items": [
        {
          "name": "Boleto de pagamento - ITS - formulário " + req.query.form,
          "quantity": 1.0,
          "unit_price": {
            "currency": "BRL",
            "value": req.query.value
          }
        }
      ]
    });
    ppr.add("note", "Boleto de pagamento " + (node_uuid.v4()), ppr.add("payment_term", {
      "term_type": "NET_45"
    }));
    ppr.add("shipping_info", {
      "first_name": req.query.first_name,
      "last_name": req.query.last_name,
      "business_name": "Not applicable",
      "phone": {
        "country_code": req.query.phone_country_code,
        "national_number": req.query.phone_national_number
      },
      "address": {
        "line1": req.query.line,
        "city": req.query.city,
        "state": req.query.state,
        "postal_code": req.query.postal_code,
        "country_code": req.query.country_code
      }
    });
    ppr.add("tax_inclusive", false);
    ppr.add("total_amount", {
      "currency": "BRL",
      "value": req.query.value
    });
    return ppr.data;
  };
  this.app.post('/paypal/invoices/novo', function(req, res) {
    return paypal_rest_sdk.invoice.create(create_invoice(req), function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.id);
    });
  });
  this.app.get('/paypal/invoices/:id/number', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.number);
    });
  });
  this.app.get('/paypal/invoices/:id/status', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.status);
    });
  });
  this.app.get('/paypal/invoices/:id/billing_info', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.billing_info);
    });
  });
  this.app.get('/paypal/invoices/:id/invoice_date', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.invoice_date);
    });
  });
  this.app.get('/paypal/invoices/:id/total_amount', function(req, res) {
    return paypal_rest_sdk.invoice.get(req.params.id, function(err, invoice) {
      if (err) {
        res.json(err);
      }
      return res.json(invoice.total_amount);
    });
  });
  this.app.post('/paypal/invoices/:id/send', function(req, res) {
    return paypal_rest_sdk.invoice.send(req.params.id, function(err, rv) {
      if (err) {
        res.json(err);
      }
      return res.json("Um email de notificação está sendo processado pelo PayPal");
    });
  });
  this.app.post('/paypal/invoices/:id/remind', function(req, res) {
    var options;
    options = {
      "subject": "Lembrança de pagamento",
      "note": "Enviamos este email para lhe lembrar do pagamento do boleto " + req.params.id,
      "send_to_merchant": true,
      "send_to_payer": true
    };
    return paypal_rest_sdk.invoice.remind(req.params.id, options, function(err, rv) {
      if (err) {
        res.json(err);
      }
      console.log(chalk.green(rv));
      return res.json("Seu email de notificação está sendo processado pelo PayPal");
    });
  });
  this.app.post('/paypal/invoices/:id/cancel', function(req, res) {
    var error1, options;
    options = {
      "subject": "Cancelamento de pagamento",
      "note": "Cancelamento do boleto " + req.params.id,
      "send_to_merchant": true,
      "send_to_payer": true
    };
    try {
      return paypal_rest_sdk.invoice.cancel(req.params.id, options, function(err, rv) {
        if (err) {
          res.json(err);
        }
        console.log(chalk.green(rv));
        return res.json("Seu email de notificação está sendo processado pelo PayPal");
      });
    } catch (error1) {
      return res.json(err);
    }
  });
  return this.app["delete"]('/paypal/invoices/:id', function(req, res) {
    return paypal_rest_sdk.invoice.del(req.params.id, function(err, rv) {
      if (err) {
        res.json(err);
      }
      return res.json("Boleto " + req.params.id + " deletado");
    });
  });
};

AppManager.prototype.docs = function() {
  var root;
  root = path.resolve((path.join(__dirname)) + "/../app/assets");
  this.app.get("/docs", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/index", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/app", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/config", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/auth-service", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/auth-service.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/formulario-service", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/formulario-service.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/boleto-service", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/boleto-service.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/main-service", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/main-service.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/main-ctrl", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/main-ctrl.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/directives", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/directives.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/run", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/run.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/boot", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/boot.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  return this.app.get("/docs/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/assets/js/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
};

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express/Firebase Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

p = require('../package.json').firebase.project.name;

Promise.all([keytar.findPassword(p + ".paypal.apiKey"), keytar.findPassword(p + ".paypal.secret")]).then(AppManager.initPayPal).then(ServerManager.start).then(ServerManager.bind).then(function(addr) {
  return console.log(chalk.cyan(onMsg(addr)));
})["catch"](function(e) {
  return console.log(e);
});
