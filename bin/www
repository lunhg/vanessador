#!/usr/bin/env /home/pi/.nvm/versions/node/v8.0.0/bin/node
var AppManager, FirebaseAdmin, ServerManager, __firebase__, atob, body_parser, chalk, compression, connect_assets, express, firebase_admin, firebase_manager, foreach, fs, getAuth, http, marked, morgan, node_uuid, onMsg, parseBasic, passport, passport_custom, passport_firebase_auth, path, pug, request_json;

fs = require('fs');

path = require('path');

http = require('http');

atob = require('atob');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

firebase_admin = require('firebase-admin');

foreach = require('foreach');

marked = require('marked');

morgan = require('morgan');

node_uuid = require('node-uuid');

passport = require('passport');

passport_custom = require('passport-custom');

passport_firebase_auth = require('passport-firebase-auth');

pug = require('pug');

request_json = require('request-json');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

FirebaseAdmin = (function() {
  function FirebaseAdmin(projectName) {
    this.projectName = projectName;
  }

  FirebaseAdmin.prototype.init = function() {
    var url;
    url = "https://" + this.projectName + ".firebaseio.com";
    return new Promise(function(resolve, reject) {
      var fa, serviceAccount;
      serviceAccount = require((path.join(__dirname)) + "/../firebase.json");
      console.log(url);
      fa = firebase_admin.initializeApp({
        credential: firebase_admin.credential.cert(serviceAccount),
        databaseURL: url
      });
      if (fa) {
        return resolve();
      } else {
        return reject();
      }
    });
  };

  return FirebaseAdmin;

})();

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/')]);
    this.app.set('port', parseInt(process.env.PORT || '3000'));
  }

  return AppManager;

})();

AppManager.make = function(result) {
  return new Promise(function(resolve, reject) {
    var app, app_manager;
    app = express();
    app_manager = new AppManager(app);
    app_manager.init();
    app_manager.passport();
    app_manager.index();
    app_manager.login();
    app_manager.logout();
    return resolve(app);
  });
};

parseBasic = function(result) {
  return new Promise(function(resolve, reject) {
    var c, i, len, o, r;
    o = {};
    for (i = 0, len = result.length; i < len; i++) {
      r = result[i];
      c = r.split("=");
      o[c[0]] = c[1];
    }
    return resolve(o);
  });
};

getAuth = function(req) {
  return new Promise(function(resolve, reject) {
    return resolve(req.query['email']);
  });
};

AppManager.prototype.passport = function() {

  /* TODO */
};

passport.use('firebase-admin-login', new passport_custom(function(req, done) {
  var onErr, onUser;
  onErr = function(error) {
    console.log(error);
    return done(error.code, null, {
      message: error.message
    });
  };
  onUser = function(userRecord) {
    var uid;
    uid = userRecord.toJSON().uid;
    return firebase_admin.auth().createCustomToken(uid).then(function(customToken) {
      console.log(customToken);
      return done(null, uid, {
        customToken: customToken
      });
    })["catch"](onErr);
  };
  return getAuth(req).then(function(email) {
    return firebase_admin.auth().getUserByEmail(email).then(onUser)["catch"](onErr)["catch"](onErr);
  });
}));

passport.serializeUser(function(user, done) {
  return done(null, user.uid);
});

passport.deserializeUser(function(id, done) {
  return done(id);
});

ServerManager = {};

ServerManager.make = function(app) {
  var self;
  self = this;
  return new Promise(function(resolve, reject) {
    var server;
    server = http.createServer(app);
    server.on('error', function(error) {
      var bind, fn;
      if (error.syscall === 'listen') {
        throw error;
      }
      bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
      fn = function(msg) {
        console.error(chalk.red(bind + ' ' + msg));
        return process.exit(1);
      };
      if (error.code === 'EACCES') {
        return fn('requires elevated privileges');
      } else if (error.code === 'EADDRINUSE') {
        return fn('is already in use');
      } else {
        return reject(error);
      }
    });
    server.listen(app.get('port'), 'localhost');
    return server.on('listening', function() {
      var addr;
      addr = server.address();
      return resolve(addr);
    });
  });
};

AppManager.prototype.init = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length]  time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  this.app.use(connect_assets({
    paths: this.app.get('assets path')
  }));
  this.app.use(passport.initialize());
  return this.app.use(passport.session());
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return res.render('index');
  });
};

AppManager.prototype.login = function() {
  return this.app.post('/login', function(req, res) {
    return passport.authenticate('firebase-admin-login', function(err, uid, info) {
      if (err) {
        return res.json(err);
      } else {
        return res.json({
          uid: uid,
          info: info
        });
      }
    })(req, res);
  });
};

AppManager.prototype.logout = function() {
  return this.app.post('/logout', function(req, res) {
    return passport.authenticate('local-logout', function(err, user, info) {
      if (err) {
        res.send(err);
      }
      return res.json("logged out");
    })(req, res);
  });
};

__firebase__ = require("../package.json").firebase;

firebase_manager = new FirebaseAdmin(__firebase__.project.name);

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express/Firebase Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

firebase_manager.init().then(AppManager.make).then(ServerManager.make).then(function(addr) {
  return console.log(chalk.cyan(onMsg(addr)));
})["catch"](function(e) {
  return console.log(e);
});
