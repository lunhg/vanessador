#!/usr/bin/env /home/pi/.nvm/versions/node/v8.0.0/bin/node
var AppManager, ServerManager, body_parser, chalk, compression, connect_assets, express, foreach, fs, http, jstransformer_marked, keytar, morgan, node_schedule, node_uuid, nodemailer, nodemailer_mailgun_transport, onMsg, p, path, paypal_rest_sdk, pug, request, request_json, request_promise, testcafe, testcafe_vue_selectors, xml2js, xmlbuilder;

fs = require('fs');

path = require('path');

http = require('http');

body_parser = require('body-parser');

chalk = require('chalk');

compression = require('compression');

connect_assets = require('connect-assets');

express = require('express');

foreach = require('foreach');

jstransformer_marked = require('jstransformer-marked');

keytar = require('keytar');

morgan = require('morgan');

node_schedule = require('node-schedule');

node_uuid = require('node-uuid');

nodemailer = require('nodemailer');

nodemailer_mailgun_transport = require('nodemailer-mailgun-transport');

paypal_rest_sdk = require('paypal-rest-sdk');

pug = require('pug');

request = require('request');

request_json = require('request-json');

request_promise = require('request-promise');

testcafe = require('testcafe');

testcafe_vue_selectors = require('testcafe-vue-selectors');

xml2js = require('xml2js');

xmlbuilder = require('xmlbuilder');


/* SETUP NODE_ENV */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

AppManager = (function() {
  function AppManager(app1) {
    this.app = app1;
    this.app.set('views', path.join(__dirname, '..', 'app/views/'));
    this.app.engine('pug', function(file_path, options, _callback) {
      return fs.readFile(file_path, 'utf8', function(err, content) {
        var fn;
        if (err) {
          _callback(err);
        }
        fn = pug.compile(content, {
          filename: file_path,
          doctype: 'html'
        });
        return _callback(null, fn({
          filters: [jstransformer_marked]
        }));
      });
    });
    this.app.set('view engine', 'pug');
    this.app.set('assets path', [path.join(__dirname, '..', 'app/assets/fonts'), path.join(__dirname, '..', 'app/assets/doc'), path.join(__dirname, '..', 'app/assets/img'), path.join(__dirname, '..', 'app/assets/css'), path.join(__dirname, '..', 'app/assets/js'), path.join(__dirname, '..', 'app/assets/'), path.join(__dirname, '..', 'app/assets/favicon.ico')]);
    console.log(process.env.PORT);
    this.app.set('port', parseInt(process.env.PORT));
  }

  return AppManager;

})();

ServerManager = {};

ServerManager.start = function(app) {
  var self;
  self = this;
  return new Promise(function(resolve, reject) {
    var server;
    server = http.createServer(app);
    return server.listen(app.get('port'), function() {
      var addr;
      addr = server.address();
      return resolve(addr);
    });
  });
};

ServerManager.routes = function() {
  return new Promise(function(resolve, reject) {
    var app, app_manager, e, error1;
    try {
      app = express();
      app_manager = new AppManager(app);
      app_manager.boot();
      app_manager.index();
      app_manager.config();
      app_manager.templates();
      app_manager.typeform();
      app_manager.mailer();
      app_manager.docs();
      return resolve(app);
    } catch (error1) {
      e = error1;
      return reject(e);
    }
  });
};

AppManager.prototype.boot = function() {
  this.app.use(morgan(':method :url :status Content-Lenght: :res[content-length] time: :response-time ms'));
  this.app.use(compression());
  this.app.use(body_parser.json());
  this.app.use(body_parser.urlencoded({
    extended: false
  }));
  return this.app.use(connect_assets({
    paths: this.app.get('assets path'),
    bundle: true
  }));
};

AppManager.prototype.index = function() {
  return this.app.get('/', function(req, res) {
    return res.render('index');
  });
};

AppManager.prototype.config = function() {
  return this.app.get('/config', function(req, res) {
    var projectName;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    return res.json({
      apiKey: process.env.FIREBASE_API_KEY,
      authDomain: projectName + ".firebaseapp.com",
      databaseURL: "https://" + projectName + ".firebaseio.com",
      projectId: projectName,
      storageBucket: projectName + ".appspot.com",
      messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID
    });
  });
};

AppManager.prototype.templates = function() {
  var getTemplate;
  getTemplate = function(p) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html, opt, r, result;
        if (!err) {
          try {
            opt = {
              filename: _p,
              doctype: 'html'
            };
            html = pug.compile(content, opt)();
            result = {
              component: {
                template: html
              },
              name: p
            };
            if (p.match(/_index/)) {
              result.path = "/";
            } else if (p.match(/^formularios_uuid_[a-z]+$/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/:uuid/" + r[2];
            } else if (p.match(/^formularios_uuid_\w+_[a-z]+$/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/:uuid/" + r[2] + "/:token";
            } else if (p.match(/formularios_novo/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/novo";
            } else if (p.match(/^boletos$/)) {
              result.path = "/boletos";
            } else if (p.match(/boletos_id/)) {
              r = p.split("_");
              result.path = "/boletos/:invoiceid";
            } else if (p.match(/^conta_\w+_\w+$/)) {
              r = p.split("_");
              result.path = "/" + r[0] + "/:option/:action";
            } else if (p.match(/^estudantes$/)) {
              result.path = "/estudantes";
            } else if (p.match(/^estudantes_id$/)) {
              result.path = "/estudantes/:id";
            } else if (p.match(/^cursos$/)) {
              result.path = "/cursos";
            } else if (p.match(/^cursos_id$/)) {
              result.path = "/cursos/:id";
            } else {
              result.path = "/" + p;
            }
            return resolve(result);
          } catch (error1) {
            e = error1;
            console.log(e);
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  this.app.get('/templates/routes/:type', function(req, res) {
    var onErr, onSuccess;
    onSuccess = function(result) {
      return res.json(result);
    };
    onErr = function(err) {
      return res.json(err.message);
    };
    return getTemplate(req.params['type']).then(onSuccess)["catch"](onErr);
  });
  this.app.get('/templates/index/routes', function(req, res) {
    return res.json(["_index", "login", "signup", "resetPassword", "confirm", "conta", "formularios", "estudantes", "cursos", "matriculas"]);
  });
  this.app.get("/templates/index/page", function(req, res) {
    var p;
    p = path.join(__dirname, '..', 'app/views', 'vue.pug');
    return fs.readFile(p, 'utf8', function(err, content) {
      var html, opt;
      opt = {
        filename: p,
        doctype: 'html'
      };
      html = pug.compile(content, opt)();
      return res.send(html);
    });
  });
  return this.app.get("/templates/index/data", function(req, res) {
    var cursos, estudantes, formularios, matriculas, xlsCursos, xlsEstudantes, xlsFormularios, xlsMatriculas;
    xlsCursos = {
      input_list: {
        'type': 'text',
        'placeholder': 'ABCDEFG',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '26',
        'label': 'Linha final'
      }
    };
    xlsEstudantes = {
      input_list: {
        'type': 'text',
        'placeholder': 'ABCDEFGHIJKLMNO',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '726',
        'label': 'Linha final'
      }
    };
    xlsFormularios = {
      input_list: {
        'type': 'text',
        'placeholder': 'AB',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '3',
        'label': 'Linha final'
      }
    };
    xlsMatriculas = {
      input_list: {
        'type': 'text',
        'placeholder': 'AB',
        'label': 'Colunas'
      },
      input_min: {
        'type': 'text',
        'placeholder': '2',
        'label': 'Linha inicial'
      },
      input_max: {
        'type': 'text',
        'placeholder': '3',
        'label': 'Linha final'
      }
    };
    formularios = {
      input_typeform: {
        'type': 'text',
        'placeholder': 'E20qGg',
        'label': 'CÃ³digo typeform'
      },
      input_curso: {
        'type': 'text',
        'placeholder': '-Ktm1CBbiRXF7OEUellX',
        'label': 'ID curso'
      }
    };
    matriculas = {
      input_curso: {
        'type': 'text',
        'label': 'ID curso'
      },
      input_estudante: {
        'type': 'text',
        'label': 'ID estudante'
      }
    };
    estudantes = {
      input_nome: {
        'type': 'text',
        'placeholder': 'nome',
        'label': 'Nome'
      },
      input_sobrenome: {
        'type': 'text',
        'placeholder': 'sobrenome',
        'label': 'Sobrenome'
      },
      input_email1: {
        'type': 'text',
        'placeholder': 'email1@dominio',
        'label': 'Email 1'
      },
      input_email2: {
        'type': 'text',
        'placeholder': 'email2@dominio',
        'label': 'Email 2'
      },
      input_email3: {
        'type': 'text',
        'placeholder': 'email3@dominio',
        'label': 'Email 3'
      },
      input_profissao: {
        'type': 'text',
        'placeholder': 'trabalho',
        'label': 'ProfissÃ£o'
      },
      input_graduacao: {
        'type': 'text',
        'placeholder': 'graduaÃ§Ã£o',
        'label': 'GraduaÃ§Ã£o'
      },
      input_idade: {
        'type': 'text',
        'placeholder': '8-80',
        'label': 'Idade'
      },
      input_genero: {
        'type': 'text',
        'placeholder': 'M/F/Outro',
        'label': 'GÃªnero'
      },
      input_telefone: {
        'type': 'text',
        'placeholder': '12345678',
        'label': 'Telefone'
      },
      input_estado: {
        'type': 'text',
        'placeholder': 'propriedade',
        'label': 'Estado'
      },
      input_cidade: {
        'type': 'text',
        'placeholder': 'propriedade',
        'label': 'Cidade'
      },
      input_isAlumni: {
        'type': 'check',
        'label': 'Ã Alumni?'
      }
    };
    cursos = {
      input_nome: {
        'type': 'text',
        'placeholder': 'nome',
        'label': 'Nome'
      },
      input_typeform_code: {
        'type': 'text',
        'placeholder': 'E20qGg',
        'label': 'CÃ³digo typeform'
      },
      input_inicio_matricula: {
        'type': 'date',
        'label': 'InÃ­cio das matrÃ­culas'
      },
      input_fim_matricula: {
        'type': 'date',
        'label': 'Fim das matrÃ­culas'
      },
      input_carga_horaria: {
        'type': 'text',
        'placeholder': '6 hs',
        'label': 'Carga HorÃ¡ria'
      },
      input_quantidade_aulas: {
        'type': 'number',
        'placeholder': '3',
        'label': 'Quantidade de Aulas'
      },
      input_data_inicio: {
        'type': 'date',
        'label': 'Data de inÃ­cio das aulas'
      },
      input_data_termino: {
        'type': 'date',
        'label': 'Data de tÃ©rmino das aulas'
      },
      input_data_inicio_valor1: {
        'type': 'number',
        'label': 'Valor para data de inÃ­cio 1 (reais)'
      },
      input_data_inicio_valor2: {
        'type': 'number',
        'label': 'Valor para data de inÃ­cio 2 (reais)'
      },
      input_data_inicio_valor3: {
        'type': 'number',
        'label': 'Valor para data de inÃ­cio 3 (reais)'
      },
      input_valor_cheio: {
        'type': 'number',
        'placeholder': '200',
        'label': 'Valor Cheio (reais)'
      },
      input_link_valor1: {
        'type': 'text',
        'placeholder': 'https://pag.ae/12345',
        'label': 'Codigo Pagseguro 1'
      },
      input_link_valor2: {
        'type': 'text',
        'placeholder': 'https://pag.ae/45678',
        'label': 'Codigo Pagseguro 2'
      },
      input_link_valor3: {
        'type': 'text',
        'placeholder': 'https://pag.ae/90123',
        'label': 'Codigo Pagseguro 3'
      }
    };
    return res.json({
      search: '',
      autorizado: false,
      user: {
        displayName: false,
        email: false,
        photoURL: false,
        telephone: false
      },
      atualizar: {},
      modelos: {
        xls: {
          cursos: xlsCursos,
          estudantes: xlsEstudantes,
          formularios: xlsFormularios,
          matriculas: xlsMatriculas
        },
        formularios: formularios,
        matriculas: matriculas,
        estudantes: estudantes,
        cursos: cursos
      }
    });
  });
};

AppManager.prototype.typeform = function() {
  return this.app.get('/typeform/data-api', function(req, res) {
    var _url, onGet;
    _url = "form/" + req.query.uuid + "?key=" + process.env.TYPEFORM_API_KEY;
    _url += "&completed=true";
    onGet = function(err, _res, body) {
      if (err) {
        return res.json(err);
      } else {
        return res.json(body);
      }
    };
    return request_json.createClient('https://api.typeform.com/v1/').get(_url, onGet);
  });
};

AppManager.prototype.mailer = function() {
  var getTemplate;
  getTemplate = function(p, opt) {
    return new Promise(function(resolve, reject) {
      var _p;
      _p = path.resolve((path.join(__dirname)) + "/../app/views/" + p + ".pug");
      return fs.readFile(_p, 'utf8', function(err, content) {
        var e, error1, html;
        if (!err) {
          try {
            html = pug.compile(content, {
              filename: _p,
              doctype: 'html'
            })({
              curso: opt.curso,
              nome: opt.nome,
              link: opt.link
            });
            return resolve(html);
          } catch (error1) {
            e = error1;
            return reject(e);
          }
        } else {
          return reject(err);
        }
      });
    });
  };
  this.app.post('/mailer/mailgun', function(req, res) {
    return res.send('SENT MAIL');
  });
  return this.app.post('/mailer/send/:type', function(req, res) {
    var curso, link, nome, projectName, self, to;
    self = this;
    projectName = require((path.join(__dirname)) + "/../package.json").firebase.project.name;
    to = req.query.to;
    nome = req.query.nome;
    curso = req.query.curso;
    link = req.query.link;
    return getTemplate('mailer-' + req.params.type, {
      nome: nome,
      curso: curso,
      link: link
    }).then(function(html) {
      var results;
      return results = {
        auth: {
          api_key: process.env.MAILGUN_API_KEY,
          domain: process.env.MAILGUN_DOMAIN
        },
        options: {
          from: "\"Vanessador-not-reply\" <postmaster@" + process.env.MAILGUN_DOMAIN + ">",
          to: req.query.to,
          subject: "[Vanessador]: Boleto - " + req.query.curso,
          html: html
        }
      };
    }).then(function(results) {
      var mailer;
      mailer = nodemailer.createTransport(nodemailer_mailgun_transport({
        auth: results.auth
      }));
      return mailer.sendMail(results.options).then(function(r) {
        res.status(201);
        return res.json(r);
      })["catch"](function(error) {
        console.log(error);
        res.status(500);
        return res.send(error);
      });
    })["catch"](function(error) {
      console.log(error);
      res.status(500);
      return res.send(error);
    });
  });
};

AppManager.prototype.docs = function() {
  var root;
  root = path.resolve((path.join(__dirname)) + "/../app/assets");
  this.app.get("/docs/:folder/:file", function(req, res) {
    var _index;
    _index = "doc/" + req.params['folder'] + "/" + req.params['file'] + ".html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/environment", function(req, res) {
    var _index;
    _index = "doc/config/environment.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/app", function(req, res) {
    var _index;
    _index = "doc/config/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/server", function(req, res) {
    var _index;
    _index = "doc/config/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/paypal", function(req, res) {
    var _index;
    _index = "doc/config/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/pagseguro", function(req, res) {
    var _index;
    _index = "doc/config/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/config/docco.css", function(req, res) {
    var _index;
    _index = "doc/config/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/dependencies", function(req, res) {
    var _index;
    _index = "doc/boot/dependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/devDependencies", function(req, res) {
    var _index;
    _index = "doc/boot/devDependencies.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/app", function(req, res) {
    var _index;
    _index = "doc/boot/app.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/server", function(req, res) {
    var _index;
    _index = "doc/boot/server.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/boot/docco.css", function(req, res) {
    var _index;
    _index = "doc/boot/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/config", function(req, res) {
    var _index;
    _index = "doc/app/controllers/config.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/docs", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docs.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/index", function(req, res) {
    var _index;
    _index = "doc/app/controllers/index.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/pagseguro", function(req, res) {
    var _index;
    _index = "doc/app/controllers/pagseguro.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/paypal", function(req, res) {
    var _index;
    _index = "doc/app/controllers/paypal.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/services", function(req, res) {
    var _index;
    _index = "doc/app/controllers/services.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/templates", function(req, res) {
    var _index;
    _index = "doc/app/controllers/templates.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  this.app.get("/docs/server/app/controllers/typeform", function(req, res) {
    var _index;
    _index = "doc/app/controllers/typeform.html";
    return res.sendFile(_index, {
      'root': root
    });
  });
  return this.app.get("/docs/server/app/controllers/docco.css", function(req, res) {
    var _index;
    _index = "doc/app/controllers/docco.css";
    return res.sendFile(_index, {
      'root': root
    });
  });
};

onMsg = function(addr) {
  return "===* Vanessador server ready *===\n* Express/Firebase Server\n* started at " + (Date.now()) + "\n* available in\n  " + addr.address + ":" + addr.port + "\n=================================";
};

p = require('../package.json').firebase.project.name;

ServerManager.routes().then(ServerManager.start).then(function(addr) {
  return console.log(chalk.cyan(onMsg(addr)));
})["catch"](function(e) {
  return console.log(e);
});
